#!/bin/bash

OUTPUT_FILE="codebase.txt"

EXCLUDE_DIRS=(".git" ".vercel" "node_modules" ".vscode" ".idea" "dist" "build" "coverage" "temp" "tmp")
EXCLUDE_FILES=("*.log" "*.tmp" "*.cache" "pnpm-lock.yaml" "tsconfig.tsbuildinfo" ".DS_Store" "Thumbs.db" "$OUTPUT_FILE")
INCLUDE_EXTENSIONS=("*.ts" "*.tsx" "*.js" "*.jsx" "*.json" "*.md" "*.yml" "*.yaml" "*.env" "*.env.example" "*.sql" "*.prisma" "*.txt" "*.config.*")

echo "üöÄ –°–±–æ—Ä –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã –ø—Ä–æ–µ–∫—Ç–∞..."
> "$OUTPUT_FILE"

echo "=== –ö–û–î–û–í–ê–Ø –ë–ê–ó–ê –ü–†–û–ï–ö–¢–ê ===" >> "$OUTPUT_FILE"
echo "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: $(date)" >> "$OUTPUT_FILE"
echo "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(pwd)" >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"

should_exclude_dir() {
    local dir_name="$1"
    for exclude in "${EXCLUDE_DIRS[@]}"; do
        [[ "$dir_name" == $exclude ]] && return 0
    done
    return 1
}

should_exclude_file() {
    local file_name="$1"
    for exclude in "${EXCLUDE_FILES[@]}"; do
        [[ "$file_name" == $exclude ]] && return 0
    done
    return 1
}

should_include_file() {
    local file_name="$1"
    for ext in "${INCLUDE_EXTENSIONS[@]}"; do
        [[ "$file_name" == $ext ]] && return 0
    done
    return 1
}

process_file() {
    local file_path="$1"
    echo "=== ${file_path#./} ===" >> "$OUTPUT_FILE"
    cat "$file_path" >> "$OUTPUT_FILE" 2>/dev/null || echo "[–û–®–ò–ë–ö–ê –ß–¢–ï–ù–ò–Ø –§–ê–ô–õ–ê]" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
}

traverse_directory() {
    local current_dir="$1"

    for item in "$current_dir"/*; do
        [[ ! -e "$item" ]] && continue

        local item_name=$(basename "$item")

        if [[ -f "$item" ]]; then
            should_exclude_file "$item_name" && continue
            should_include_file "$item_name" && { echo "üìÑ $item"; process_file "$item"; }
        elif [[ -d "$item" ]]; then
            should_exclude_dir "$item_name" && { echo "‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: $item"; continue; }
            echo "üìÅ $item"
            traverse_directory "$item"
        fi
    done
}

traverse_directory "."

echo "‚úÖ –ì–æ—Ç–æ–≤–æ! –†–∞–∑–º–µ—Ä: $(du -h "$OUTPUT_FILE" | cut -f1), —Å—Ç—Ä–æ–∫: $(wc -l < "$OUTPUT_FILE")"
